// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonModel.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "CommonModel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommonModelRoot

@implementation CommonModelRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - CommonModelRoot_FileDescriptor

static GPBFileDescriptor *CommonModelRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"framework"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PBDeviceType

GPBEnumDescriptor *PBDeviceType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "DeviceAndroid\000DeviceIos\000DevicePc\000";
    static const int32_t values[] = {
        PBDeviceType_DeviceAndroid,
        PBDeviceType_DeviceIos,
        PBDeviceType_DevicePc,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBDeviceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBDeviceType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBDeviceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBDeviceType_DeviceAndroid:
    case PBDeviceType_DeviceIos:
    case PBDeviceType_DevicePc:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PBPaymentChannel

GPBEnumDescriptor *PBPaymentChannel_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "PayAli\000PayWechat\000PayAppstoreIap\000";
    static const int32_t values[] = {
        PBPaymentChannel_PayAli,
        PBPaymentChannel_PayWechat,
        PBPaymentChannel_PayAppstoreIap,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBPaymentChannel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBPaymentChannel_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBPaymentChannel_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBPaymentChannel_PayAli:
    case PBPaymentChannel_PayWechat:
    case PBPaymentChannel_PayAppstoreIap:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PBBoolValue

GPBEnumDescriptor *PBBoolValue_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "BoolNone\000BoolTrue\000BoolFalse\000";
    static const int32_t values[] = {
        PBBoolValue_BoolNone,
        PBBoolValue_BoolTrue,
        PBBoolValue_BoolFalse,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBBoolValue)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBBoolValue_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBBoolValue_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBBoolValue_BoolNone:
    case PBBoolValue_BoolTrue:
    case PBBoolValue_BoolFalse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PBNetwork

GPBEnumDescriptor *PBNetwork_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "NetWifi\000NetMobile\000NetTelecom\000NetUnicom\000";
    static const int32_t values[] = {
        PBNetwork_NetWifi,
        PBNetwork_NetMobile,
        PBNetwork_NetTelecom,
        PBNetwork_NetUnicom,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBNetwork)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBNetwork_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBNetwork_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBNetwork_NetWifi:
    case PBNetwork_NetMobile:
    case PBNetwork_NetTelecom:
    case PBNetwork_NetUnicom:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PBFeedbackStatus

GPBEnumDescriptor *PBFeedbackStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "FeedbackPending\000FeedbackProcessed\000";
    static const int32_t values[] = {
        PBFeedbackStatus_FeedbackPending,
        PBFeedbackStatus_FeedbackProcessed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBFeedbackStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBFeedbackStatus_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBFeedbackStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBFeedbackStatus_FeedbackPending:
    case PBFeedbackStatus_FeedbackProcessed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PBSex

GPBEnumDescriptor *PBSex_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "SexNone\000SexMale\000SexFemale\000";
    static const int32_t values[] = {
        PBSex_SexNone,
        PBSex_SexMale,
        PBSex_SexFemale,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBSex)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBSex_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBSex_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBSex_SexNone:
    case PBSex_SexMale:
    case PBSex_SexFemale:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PBPagePara

@implementation PBPagePara

@dynamic offset;
@dynamic limit;

typedef struct PBPagePara__storage_ {
  uint32_t _has_storage_[1];
  uint32_t offset;
  uint32_t limit;
} PBPagePara__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = PBPagePara_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBPagePara__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = PBPagePara_FieldNumber_Limit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBPagePara__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBPagePara class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBPagePara__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBPageInfo

@implementation PBPageInfo

@dynamic total;
@dynamic pageOffset;
@dynamic pageSize;
@dynamic filterCount;

typedef struct PBPageInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t total;
  uint32_t pageOffset;
  uint32_t pageSize;
  uint32_t filterCount;
} PBPageInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PBPageInfo_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBPageInfo__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageOffset",
        .dataTypeSpecific.className = NULL,
        .number = PBPageInfo_FieldNumber_PageOffset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBPageInfo__storage_, pageOffset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PBPageInfo_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBPageInfo__storage_, pageSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "filterCount",
        .dataTypeSpecific.className = NULL,
        .number = PBPageInfo_FieldNumber_FilterCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBPageInfo__storage_, filterCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBPageInfo class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBPageInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\n\000\003\010\000\004\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBIntValue

@implementation PBIntValue

@dynamic value;

typedef struct PBIntValue__storage_ {
  uint32_t _has_storage_[1];
  uint32_t value;
} PBIntValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PBIntValue_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBIntValue__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBIntValue class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBIntValue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBLongValue

@implementation PBLongValue

@dynamic value;

typedef struct PBLongValue__storage_ {
  uint32_t _has_storage_[1];
  uint64_t value;
} PBLongValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PBLongValue_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLongValue__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLongValue class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLongValue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBStrValue

@implementation PBStrValue

@dynamic value;

typedef struct PBStrValue__storage_ {
  uint32_t _has_storage_[1];
  NSString *value;
} PBStrValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PBStrValue_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBStrValue__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBStrValue class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBStrValue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBKeyValue

@implementation PBKeyValue

@dynamic key;
@dynamic value;

typedef struct PBKeyValue__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
} PBKeyValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = PBKeyValue_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBKeyValue__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PBKeyValue_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBKeyValue__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBKeyValue class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBKeyValue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBKeyValueList

@implementation PBKeyValueList

@dynamic kvArray, kvArray_Count;

typedef struct PBKeyValueList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *kvArray;
} PBKeyValueList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kvArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBKeyValue),
        .number = PBKeyValueList_FieldNumber_KvArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBKeyValueList__storage_, kvArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBKeyValueList class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBKeyValueList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBLocation

@implementation PBLocation

@dynamic locationId;
@dynamic oversea;
@dynamic continentId;
@dynamic countryId;
@dynamic provinceId;
@dynamic cityId;
@dynamic districtId;
@dynamic locationName;
@dynamic hot;

typedef struct PBLocation__storage_ {
  uint32_t _has_storage_[1];
  uint32_t locationId;
  NSString *continentId;
  NSString *countryId;
  NSString *provinceId;
  NSString *cityId;
  NSString *districtId;
  NSString *locationName;
} PBLocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locationId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_LocationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLocation__storage_, locationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "oversea",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_Oversea,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "continentId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_ContinentId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBLocation__storage_, continentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "countryId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_CountryId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBLocation__storage_, countryId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "provinceId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_ProvinceId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PBLocation__storage_, provinceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_CityId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PBLocation__storage_, cityId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "districtId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_DistrictId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PBLocation__storage_, districtId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "locationName",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_LocationName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PBLocation__storage_, locationName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hot",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_Hot,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocation class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\n\000\003\013\000\004\t\000\005\n\000\006\006\000\007\n\000\010\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBUserFeedback

@implementation PBUserFeedback

@dynamic feedbackId;
@dynamic content;
@dynamic createDate;
@dynamic deviceType;
@dynamic appVersion;
@dynamic user;
@dynamic remark;
@dynamic status;

typedef struct PBUserFeedback__storage_ {
  uint32_t _has_storage_[1];
  uint32_t feedbackId;
  PBDeviceType deviceType;
  PBFeedbackStatus status;
  NSString *content;
  NSString *appVersion;
  NSString *user;
  NSString *remark;
  uint64_t createDate;
} PBUserFeedback__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "feedbackId",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_FeedbackId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, feedbackId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createDate",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_CreateDate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, createDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PBDeviceType_EnumDescriptor,
        .number = PBUserFeedback_FieldNumber_DeviceType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "appVersion",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_AppVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, appVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_User,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_Remark,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PBFeedbackStatus_EnumDescriptor,
        .number = PBUserFeedback_FieldNumber_Status,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBUserFeedback class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBUserFeedback__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\n\000\003\n\000\004\n\000\005\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PBUserFeedback_DeviceType_RawValue(PBUserFeedback *message) {
  GPBDescriptor *descriptor = [PBUserFeedback descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBUserFeedback_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPBUserFeedback_DeviceType_RawValue(PBUserFeedback *message, int32_t value) {
  GPBDescriptor *descriptor = [PBUserFeedback descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBUserFeedback_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PBUserFeedback_Status_RawValue(PBUserFeedback *message) {
  GPBDescriptor *descriptor = [PBUserFeedback descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBUserFeedback_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPBUserFeedback_Status_RawValue(PBUserFeedback *message, int32_t value) {
  GPBDescriptor *descriptor = [PBUserFeedback descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBUserFeedback_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PBUserFeedbackList

@implementation PBUserFeedbackList

@dynamic feedBacksArray, feedBacksArray_Count;
@dynamic hasPageInfo, pageInfo;

typedef struct PBUserFeedbackList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *feedBacksArray;
  PBPageInfo *pageInfo;
} PBUserFeedbackList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "feedBacksArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBUserFeedback),
        .number = PBUserFeedbackList_FieldNumber_FeedBacksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBUserFeedbackList__storage_, feedBacksArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pageInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PBPageInfo),
        .number = PBUserFeedbackList_FieldNumber_PageInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBUserFeedbackList__storage_, pageInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBUserFeedbackList class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBUserFeedbackList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000feedBacks\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBGetUserFeedBackListReq

@implementation PBGetUserFeedBackListReq

@dynamic beginDate;
@dynamic endDate;
@dynamic keyword;
@dynamic hasPage, page;

typedef struct PBGetUserFeedBackListReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *keyword;
  PBPagePara *page;
  uint64_t beginDate;
  uint64_t endDate;
} PBGetUserFeedBackListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "beginDate",
        .dataTypeSpecific.className = NULL,
        .number = PBGetUserFeedBackListReq_FieldNumber_BeginDate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBGetUserFeedBackListReq__storage_, beginDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "endDate",
        .dataTypeSpecific.className = NULL,
        .number = PBGetUserFeedBackListReq_FieldNumber_EndDate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBGetUserFeedBackListReq__storage_, endDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = PBGetUserFeedBackListReq_FieldNumber_Keyword,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBGetUserFeedBackListReq__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(PBPagePara),
        .number = PBGetUserFeedBackListReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBGetUserFeedBackListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBGetUserFeedBackListReq class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBGetUserFeedBackListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBDevice

@implementation PBDevice

@dynamic deviceOs;
@dynamic deviceModel;
@dynamic deviceId;

typedef struct PBDevice__storage_ {
  uint32_t _has_storage_[1];
  NSString *deviceOs;
  NSString *deviceModel;
  NSString *deviceId;
} PBDevice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceOs",
        .dataTypeSpecific.className = NULL,
        .number = PBDevice_FieldNumber_DeviceOs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBDevice__storage_, deviceOs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceModel",
        .dataTypeSpecific.className = NULL,
        .number = PBDevice_FieldNumber_DeviceModel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBDevice__storage_, deviceModel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = PBDevice_FieldNumber_DeviceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBDevice__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBDevice class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBDevice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\010\010\000\t\013\000\n\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBLocationQueryReq

@implementation PBLocationQueryReq

@dynamic higherId;
@dynamic locationName;

typedef struct PBLocationQueryReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *higherId;
  NSString *locationName;
} PBLocationQueryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "higherId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationQueryReq_FieldNumber_HigherId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLocationQueryReq__storage_, higherId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "locationName",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationQueryReq_FieldNumber_LocationName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBLocationQueryReq__storage_, locationName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocationQueryReq class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocationQueryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBLocationList

@implementation PBLocationList

@dynamic locationsArray, locationsArray_Count;
@dynamic hasPageInfo, pageInfo;

typedef struct PBLocationList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *locationsArray;
  PBPageInfo *pageInfo;
} PBLocationList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBLocation),
        .number = PBLocationList_FieldNumber_LocationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBLocationList__storage_, locationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pageInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PBPageInfo),
        .number = PBLocationList_FieldNumber_PageInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLocationList__storage_, pageInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocationList class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocationList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBLocationData

@implementation PBLocationData

@dynamic locationsArray, locationsArray_Count;
@dynamic modifyTime;

typedef struct PBLocationData__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *locationsArray;
  uint64_t modifyTime;
} PBLocationData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBLocation),
        .number = PBLocationData_FieldNumber_LocationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBLocationData__storage_, locationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modifyTime",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationData_FieldNumber_ModifyTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLocationData__storage_, modifyTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocationData class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocationData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBLocationDetectReq

@implementation PBLocationDetectReq

@dynamic longitude;
@dynamic latitude;

typedef struct PBLocationDetectReq__storage_ {
  uint32_t _has_storage_[1];
  float longitude;
  float latitude;
} PBLocationDetectReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationDetectReq_FieldNumber_Longitude,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLocationDetectReq__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationDetectReq_FieldNumber_Latitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBLocationDetectReq__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocationDetectReq class]
                                     rootClass:[CommonModelRoot class]
                                          file:CommonModelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocationDetectReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
