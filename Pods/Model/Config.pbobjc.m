// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Config.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Config.pbobjc.h"
 #import "CommonModel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ConfigRoot

@implementation ConfigRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ConfigRoot_FileDescriptor

static GPBFileDescriptor *ConfigRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"framework"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PBBasicConfig

@implementation PBBasicConfig

@dynamic iosSplash;
@dynamic androidSplash;
@dynamic hasIosVersion, iosVersion;
@dynamic hasAndroidVersion, androidVersion;
@dynamic hasShareConfig, shareConfig;
@dynamic hasURLConfig, URLConfig;
@dynamic hasWechatConfig, wechatConfig;
@dynamic hasDefaultQiniuHost, defaultQiniuHost;
@dynamic bussinessConfig;

typedef struct PBBasicConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *iosSplash;
  NSString *androidSplash;
  PBIOSVersion *iosVersion;
  PBAndroidVersion *androidVersion;
  PBShareConfig *shareConfig;
  PBDynamicURLConfig *URLConfig;
  PBWeChatConfig *wechatConfig;
  PBQiniuTokenHost *defaultQiniuHost;
  NSData *bussinessConfig;
} PBBasicConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iosSplash",
        .dataTypeSpecific.className = NULL,
        .number = PBBasicConfig_FieldNumber_IosSplash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBBasicConfig__storage_, iosSplash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "androidSplash",
        .dataTypeSpecific.className = NULL,
        .number = PBBasicConfig_FieldNumber_AndroidSplash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBBasicConfig__storage_, androidSplash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iosVersion",
        .dataTypeSpecific.className = GPBStringifySymbol(PBIOSVersion),
        .number = PBBasicConfig_FieldNumber_IosVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBBasicConfig__storage_, iosVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "androidVersion",
        .dataTypeSpecific.className = GPBStringifySymbol(PBAndroidVersion),
        .number = PBBasicConfig_FieldNumber_AndroidVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBBasicConfig__storage_, androidVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shareConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(PBShareConfig),
        .number = PBBasicConfig_FieldNumber_ShareConfig,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBBasicConfig__storage_, shareConfig),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "URLConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(PBDynamicURLConfig),
        .number = PBBasicConfig_FieldNumber_URLConfig,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PBBasicConfig__storage_, URLConfig),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wechatConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(PBWeChatConfig),
        .number = PBBasicConfig_FieldNumber_WechatConfig,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PBBasicConfig__storage_, wechatConfig),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "defaultQiniuHost",
        .dataTypeSpecific.className = GPBStringifySymbol(PBQiniuTokenHost),
        .number = PBBasicConfig_FieldNumber_DefaultQiniuHost,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PBBasicConfig__storage_, defaultQiniuHost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bussinessConfig",
        .dataTypeSpecific.className = NULL,
        .number = PBBasicConfig_FieldNumber_BussinessConfig,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PBBasicConfig__storage_, bussinessConfig),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBBasicConfig class]
                                     rootClass:[ConfigRoot class]
                                          file:ConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBBasicConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001\t\000\002\r\000\003\n\000\004\016\000\n\013\000\013!!\'\000\014\014\000\r\020\000\024\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBDynamicURLConfig

@implementation PBDynamicURLConfig

@dynamic officialWebsite;
@dynamic wechatPublicAccount;
@dynamic userAgreementURL;

typedef struct PBDynamicURLConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *officialWebsite;
  NSString *wechatPublicAccount;
  NSString *userAgreementURL;
} PBDynamicURLConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "officialWebsite",
        .dataTypeSpecific.className = NULL,
        .number = PBDynamicURLConfig_FieldNumber_OfficialWebsite,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBDynamicURLConfig__storage_, officialWebsite),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wechatPublicAccount",
        .dataTypeSpecific.className = NULL,
        .number = PBDynamicURLConfig_FieldNumber_WechatPublicAccount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBDynamicURLConfig__storage_, wechatPublicAccount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userAgreementURL",
        .dataTypeSpecific.className = NULL,
        .number = PBDynamicURLConfig_FieldNumber_UserAgreementURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBDynamicURLConfig__storage_, userAgreementURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBDynamicURLConfig class]
                                     rootClass:[ConfigRoot class]
                                          file:ConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBDynamicURLConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\017\000\002\023\000\003\016!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBWeChatConfig

@implementation PBWeChatConfig

@dynamic wechatAppKey;
@dynamic wechatAppSecret;
@dynamic hasWechatShareConfig, wechatShareConfig;
@dynamic qqAppKey;
@dynamic qqAppSecret;
@dynamic hasQqShareConfig, qqShareConfig;

typedef struct PBWeChatConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *wechatAppKey;
  NSString *wechatAppSecret;
  PBShareConfig *wechatShareConfig;
  NSString *qqAppKey;
  NSString *qqAppSecret;
  PBShareConfig *qqShareConfig;
} PBWeChatConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wechatAppKey",
        .dataTypeSpecific.className = NULL,
        .number = PBWeChatConfig_FieldNumber_WechatAppKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBWeChatConfig__storage_, wechatAppKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wechatAppSecret",
        .dataTypeSpecific.className = NULL,
        .number = PBWeChatConfig_FieldNumber_WechatAppSecret,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBWeChatConfig__storage_, wechatAppSecret),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wechatShareConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(PBShareConfig),
        .number = PBWeChatConfig_FieldNumber_WechatShareConfig,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBWeChatConfig__storage_, wechatShareConfig),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "qqAppKey",
        .dataTypeSpecific.className = NULL,
        .number = PBWeChatConfig_FieldNumber_QqAppKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBWeChatConfig__storage_, qqAppKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "qqAppSecret",
        .dataTypeSpecific.className = NULL,
        .number = PBWeChatConfig_FieldNumber_QqAppSecret,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBWeChatConfig__storage_, qqAppSecret),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "qqShareConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(PBShareConfig),
        .number = PBWeChatConfig_FieldNumber_QqShareConfig,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PBWeChatConfig__storage_, qqShareConfig),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBWeChatConfig class]
                                     rootClass:[ConfigRoot class]
                                          file:ConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBWeChatConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\014\000\002\017\000\003\021\000\013\010\000\014\013\000\r\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBQiniuTokenHost

@implementation PBQiniuTokenHost

@dynamic token;
@dynamic host;

typedef struct PBQiniuTokenHost__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
  NSString *host;
} PBQiniuTokenHost__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = PBQiniuTokenHost_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBQiniuTokenHost__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "host",
        .dataTypeSpecific.className = NULL,
        .number = PBQiniuTokenHost_FieldNumber_Host,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBQiniuTokenHost__storage_, host),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBQiniuTokenHost class]
                                     rootClass:[ConfigRoot class]
                                          file:ConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBQiniuTokenHost__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBShareConfig

@implementation PBShareConfig

@dynamic appShareURL;
@dynamic appShareTitle;
@dynamic appShareDescription;
@dynamic appLogoURL;

typedef struct PBShareConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *appShareURL;
  NSString *appShareTitle;
  NSString *appShareDescription;
  NSString *appLogoURL;
} PBShareConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appShareURL",
        .dataTypeSpecific.className = NULL,
        .number = PBShareConfig_FieldNumber_AppShareURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBShareConfig__storage_, appShareURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appShareTitle",
        .dataTypeSpecific.className = NULL,
        .number = PBShareConfig_FieldNumber_AppShareTitle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBShareConfig__storage_, appShareTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appShareDescription",
        .dataTypeSpecific.className = NULL,
        .number = PBShareConfig_FieldNumber_AppShareDescription,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBShareConfig__storage_, appShareDescription),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appLogoURL",
        .dataTypeSpecific.className = NULL,
        .number = PBShareConfig_FieldNumber_AppLogoURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBShareConfig__storage_, appLogoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBShareConfig class]
                                     rootClass:[ConfigRoot class]
                                          file:ConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBShareConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t!!\000\002\r\000\003\023\000\004\010!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBIOSVersion

@implementation PBIOSVersion

@dynamic reviewVersion;
@dynamic latestVersion;
@dynamic URL;
@dynamic forceUpdateVersionsArray, forceUpdateVersionsArray_Count;
@dynamic title;
@dynamic contentsArray, contentsArray_Count;

typedef struct PBIOSVersion__storage_ {
  uint32_t _has_storage_[1];
  NSString *reviewVersion;
  NSString *latestVersion;
  NSString *URL;
  NSMutableArray *forceUpdateVersionsArray;
  NSString *title;
  NSMutableArray *contentsArray;
} PBIOSVersion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reviewVersion",
        .dataTypeSpecific.className = NULL,
        .number = PBIOSVersion_FieldNumber_ReviewVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBIOSVersion__storage_, reviewVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "latestVersion",
        .dataTypeSpecific.className = NULL,
        .number = PBIOSVersion_FieldNumber_LatestVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBIOSVersion__storage_, latestVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PBIOSVersion_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBIOSVersion__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "forceUpdateVersionsArray",
        .dataTypeSpecific.className = NULL,
        .number = PBIOSVersion_FieldNumber_ForceUpdateVersionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBIOSVersion__storage_, forceUpdateVersionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PBIOSVersion_FieldNumber_Title,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBIOSVersion__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentsArray",
        .dataTypeSpecific.className = NULL,
        .number = PBIOSVersion_FieldNumber_ContentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBIOSVersion__storage_, contentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBIOSVersion class]
                                     rootClass:[ConfigRoot class]
                                          file:ConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBIOSVersion__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\r\000\002\r\000\003!!!\000\004\000forceUpdateVersions\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBLocationConfig

@implementation PBLocationConfig

@dynamic hotCitiesArray, hotCitiesArray_Count;
@dynamic othersArray, othersArray_Count;

typedef struct PBLocationConfig__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *hotCitiesArray;
  NSMutableArray *othersArray;
} PBLocationConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hotCitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBLocation),
        .number = PBLocationConfig_FieldNumber_HotCitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBLocationConfig__storage_, hotCitiesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "othersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBLocation),
        .number = PBLocationConfig_FieldNumber_OthersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBLocationConfig__storage_, othersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocationConfig class]
                                     rootClass:[ConfigRoot class]
                                          file:ConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocationConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000hotCities\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBAndroidVersion

@implementation PBAndroidVersion

@dynamic versionCode;
@dynamic versionName;
@dynamic URL;
@dynamic md5;
@dynamic forceUpdateVersionCodesArray, forceUpdateVersionCodesArray_Count;
@dynamic title;
@dynamic contentsArray, contentsArray_Count;

typedef struct PBAndroidVersion__storage_ {
  uint32_t _has_storage_[1];
  uint32_t versionCode;
  NSString *versionName;
  NSString *URL;
  NSString *md5;
  GPBUInt32Array *forceUpdateVersionCodesArray;
  NSString *title;
  NSMutableArray *contentsArray;
} PBAndroidVersion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "versionCode",
        .dataTypeSpecific.className = NULL,
        .number = PBAndroidVersion_FieldNumber_VersionCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBAndroidVersion__storage_, versionCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "versionName",
        .dataTypeSpecific.className = NULL,
        .number = PBAndroidVersion_FieldNumber_VersionName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBAndroidVersion__storage_, versionName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PBAndroidVersion_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBAndroidVersion__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "md5",
        .dataTypeSpecific.className = NULL,
        .number = PBAndroidVersion_FieldNumber_Md5,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBAndroidVersion__storage_, md5),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "forceUpdateVersionCodesArray",
        .dataTypeSpecific.className = NULL,
        .number = PBAndroidVersion_FieldNumber_ForceUpdateVersionCodesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBAndroidVersion__storage_, forceUpdateVersionCodesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PBAndroidVersion_FieldNumber_Title,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBAndroidVersion__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentsArray",
        .dataTypeSpecific.className = NULL,
        .number = PBAndroidVersion_FieldNumber_ContentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBAndroidVersion__storage_, contentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBAndroidVersion class]
                                     rootClass:[ConfigRoot class]
                                          file:ConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBAndroidVersion__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\002\013\000\003!!!\000\005\000forceUpdateVersionCodes\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBSystemParaConfig

@implementation PBSystemParaConfig

@dynamic key;
@dynamic value;
@dynamic desc;
@dynamic createTime;
@dynamic modifyTime;

typedef struct PBSystemParaConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
  NSString *desc;
  uint64_t createTime;
  uint64_t modifyTime;
} PBSystemParaConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = PBSystemParaConfig_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBSystemParaConfig__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = PBSystemParaConfig_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBSystemParaConfig__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = PBSystemParaConfig_FieldNumber_Desc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBSystemParaConfig__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = PBSystemParaConfig_FieldNumber_CreateTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBSystemParaConfig__storage_, createTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "modifyTime",
        .dataTypeSpecific.className = NULL,
        .number = PBSystemParaConfig_FieldNumber_ModifyTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBSystemParaConfig__storage_, modifyTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBSystemParaConfig class]
                                     rootClass:[ConfigRoot class]
                                          file:ConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBSystemParaConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\n\000\005\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBSystemParaConfigList

@implementation PBSystemParaConfigList

@dynamic configsArray, configsArray_Count;

typedef struct PBSystemParaConfigList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *configsArray;
} PBSystemParaConfigList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "configsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBSystemParaConfig),
        .number = PBSystemParaConfigList_FieldNumber_ConfigsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBSystemParaConfigList__storage_, configsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBSystemParaConfigList class]
                                     rootClass:[ConfigRoot class]
                                          file:ConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBSystemParaConfigList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBSystemParaReq

@implementation PBSystemParaReq

@dynamic key;
@dynamic defaultValue;

typedef struct PBSystemParaReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *defaultValue;
} PBSystemParaReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = PBSystemParaReq_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBSystemParaReq__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "defaultValue",
        .dataTypeSpecific.className = NULL,
        .number = PBSystemParaReq_FieldNumber_DefaultValue,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBSystemParaReq__storage_, defaultValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBSystemParaReq class]
                                     rootClass:[ConfigRoot class]
                                          file:ConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBSystemParaReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
