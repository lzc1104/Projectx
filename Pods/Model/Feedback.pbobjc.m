// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Feedback.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Feedback.pbobjc.h"
 #import "CommonModel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FeedbackRoot

@implementation FeedbackRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - FeedbackRoot_FileDescriptor

static GPBFileDescriptor *FeedbackRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"framework"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PBFeedbackStatus

GPBEnumDescriptor *PBFeedbackStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "FeedbackPending\000FeedbackProcessed\000";
    static const int32_t values[] = {
        PBFeedbackStatus_FeedbackPending,
        PBFeedbackStatus_FeedbackProcessed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBFeedbackStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBFeedbackStatus_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBFeedbackStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBFeedbackStatus_FeedbackPending:
    case PBFeedbackStatus_FeedbackProcessed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PBUserFeedback

@implementation PBUserFeedback

@dynamic feedbackId;
@dynamic content;
@dynamic createDate;
@dynamic deviceType;
@dynamic appVersion;
@dynamic userId;
@dynamic remark;
@dynamic status;
@dynamic businessUser;

typedef struct PBUserFeedback__storage_ {
  uint32_t _has_storage_[1];
  uint32_t feedbackId;
  PBDeviceType deviceType;
  uint32_t userId;
  PBFeedbackStatus status;
  NSString *content;
  NSString *appVersion;
  NSString *remark;
  NSData *businessUser;
  uint64_t createDate;
} PBUserFeedback__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "feedbackId",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_FeedbackId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, feedbackId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createDate",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_CreateDate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, createDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = PBDeviceType_EnumDescriptor,
        .number = PBUserFeedback_FieldNumber_DeviceType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "appVersion",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_AppVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, appVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_UserId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_Remark,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PBFeedbackStatus_EnumDescriptor,
        .number = PBUserFeedback_FieldNumber_Status,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "businessUser",
        .dataTypeSpecific.className = NULL,
        .number = PBUserFeedback_FieldNumber_BusinessUser,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PBUserFeedback__storage_, businessUser),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBUserFeedback class]
                                     rootClass:[FeedbackRoot class]
                                          file:FeedbackRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBUserFeedback__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\n\000\003\n\000\004\n\000\005\n\000\006\006\000*\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PBUserFeedback_DeviceType_RawValue(PBUserFeedback *message) {
  GPBDescriptor *descriptor = [PBUserFeedback descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBUserFeedback_FieldNumber_DeviceType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPBUserFeedback_DeviceType_RawValue(PBUserFeedback *message, int32_t value) {
  GPBDescriptor *descriptor = [PBUserFeedback descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBUserFeedback_FieldNumber_DeviceType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PBUserFeedback_Status_RawValue(PBUserFeedback *message) {
  GPBDescriptor *descriptor = [PBUserFeedback descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBUserFeedback_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPBUserFeedback_Status_RawValue(PBUserFeedback *message, int32_t value) {
  GPBDescriptor *descriptor = [PBUserFeedback descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBUserFeedback_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PBUserFeedbackList

@implementation PBUserFeedbackList

@dynamic feedBacksArray, feedBacksArray_Count;
@dynamic hasPageInfo, pageInfo;

typedef struct PBUserFeedbackList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *feedBacksArray;
  PBPageInfo *pageInfo;
} PBUserFeedbackList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "feedBacksArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBUserFeedback),
        .number = PBUserFeedbackList_FieldNumber_FeedBacksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBUserFeedbackList__storage_, feedBacksArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pageInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PBPageInfo),
        .number = PBUserFeedbackList_FieldNumber_PageInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBUserFeedbackList__storage_, pageInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBUserFeedbackList class]
                                     rootClass:[FeedbackRoot class]
                                          file:FeedbackRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBUserFeedbackList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000feedBacks\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBGetUserFeedBackListReq

@implementation PBGetUserFeedBackListReq

@dynamic beginDate;
@dynamic endDate;
@dynamic keyword;
@dynamic hasPage, page;

typedef struct PBGetUserFeedBackListReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *keyword;
  PBPagePara *page;
  uint64_t beginDate;
  uint64_t endDate;
} PBGetUserFeedBackListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "beginDate",
        .dataTypeSpecific.className = NULL,
        .number = PBGetUserFeedBackListReq_FieldNumber_BeginDate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBGetUserFeedBackListReq__storage_, beginDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "endDate",
        .dataTypeSpecific.className = NULL,
        .number = PBGetUserFeedBackListReq_FieldNumber_EndDate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBGetUserFeedBackListReq__storage_, endDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = PBGetUserFeedBackListReq_FieldNumber_Keyword,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBGetUserFeedBackListReq__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(PBPagePara),
        .number = PBGetUserFeedBackListReq_FieldNumber_Page,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBGetUserFeedBackListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBGetUserFeedBackListReq class]
                                     rootClass:[FeedbackRoot class]
                                          file:FeedbackRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBGetUserFeedBackListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
