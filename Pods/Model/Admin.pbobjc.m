// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Admin.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Admin.pbobjc.h"
 #import "CommonModel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AdminRoot

@implementation AdminRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AdminRoot_FileDescriptor

static GPBFileDescriptor *AdminRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"framework"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PBAdmin

@implementation PBAdmin

@dynamic adminId;
@dynamic realName;
@dynamic password;
@dynamic mobile;
@dynamic lastLoginDate;
@dynamic rolesArray, rolesArray_Count;
@dynamic locked;
@dynamic isSuper;

typedef struct PBAdmin__storage_ {
  uint32_t _has_storage_[1];
  uint32_t adminId;
  NSString *realName;
  NSString *password;
  NSString *mobile;
  GPBUInt32Array *rolesArray;
  uint64_t lastLoginDate;
} PBAdmin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adminId",
        .dataTypeSpecific.className = NULL,
        .number = PBAdmin_FieldNumber_AdminId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBAdmin__storage_, adminId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "realName",
        .dataTypeSpecific.className = NULL,
        .number = PBAdmin_FieldNumber_RealName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBAdmin__storage_, realName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = PBAdmin_FieldNumber_Password,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBAdmin__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = PBAdmin_FieldNumber_Mobile,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBAdmin__storage_, mobile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastLoginDate",
        .dataTypeSpecific.className = NULL,
        .number = PBAdmin_FieldNumber_LastLoginDate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBAdmin__storage_, lastLoginDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "rolesArray",
        .dataTypeSpecific.className = NULL,
        .number = PBAdmin_FieldNumber_RolesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBAdmin__storage_, rolesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "locked",
        .dataTypeSpecific.className = NULL,
        .number = PBAdmin_FieldNumber_Locked,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isSuper",
        .dataTypeSpecific.className = NULL,
        .number = PBAdmin_FieldNumber_IsSuper,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBAdmin class]
                                     rootClass:[AdminRoot class]
                                          file:AdminRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBAdmin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\010\000\005\r\000\010\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBAdminLog

@implementation PBAdminLog

@dynamic id_p;
@dynamic hasAdmin, admin;
@dynamic adminName;
@dynamic event;
@dynamic description_p;
@dynamic createDate;

typedef struct PBAdminLog__storage_ {
  uint32_t _has_storage_[1];
  PBAdmin *admin;
  NSString *adminName;
  NSString *event;
  NSString *description_p;
  uint64_t id_p;
  uint64_t createDate;
} PBAdminLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PBAdminLog_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBAdminLog__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "admin",
        .dataTypeSpecific.className = GPBStringifySymbol(PBAdmin),
        .number = PBAdminLog_FieldNumber_Admin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBAdminLog__storage_, admin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adminName",
        .dataTypeSpecific.className = NULL,
        .number = PBAdminLog_FieldNumber_AdminName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBAdminLog__storage_, adminName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "event",
        .dataTypeSpecific.className = NULL,
        .number = PBAdminLog_FieldNumber_Event,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBAdminLog__storage_, event),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = PBAdminLog_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBAdminLog__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createDate",
        .dataTypeSpecific.className = NULL,
        .number = PBAdminLog_FieldNumber_CreateDate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PBAdminLog__storage_, createDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBAdminLog class]
                                     rootClass:[AdminRoot class]
                                          file:AdminRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBAdminLog__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\t\000\006\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBGetAdminListReq

@implementation PBGetAdminListReq

@dynamic rolesArray, rolesArray_Count;
@dynamic locked;
@dynamic searchKey;
@dynamic hasPage, page;

typedef struct PBGetAdminListReq__storage_ {
  uint32_t _has_storage_[1];
  PBBoolValue locked;
  GPBInt32Array *rolesArray;
  NSString *searchKey;
  PBPagePara *page;
} PBGetAdminListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rolesArray",
        .dataTypeSpecific.className = NULL,
        .number = PBGetAdminListReq_FieldNumber_RolesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBGetAdminListReq__storage_, rolesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "locked",
        .dataTypeSpecific.enumDescFunc = PBBoolValue_EnumDescriptor,
        .number = PBGetAdminListReq_FieldNumber_Locked,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBGetAdminListReq__storage_, locked),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "searchKey",
        .dataTypeSpecific.className = NULL,
        .number = PBGetAdminListReq_FieldNumber_SearchKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBGetAdminListReq__storage_, searchKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(PBPagePara),
        .number = PBGetAdminListReq_FieldNumber_Page,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBGetAdminListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBGetAdminListReq class]
                                     rootClass:[AdminRoot class]
                                          file:AdminRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBGetAdminListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PBGetAdminListReq_Locked_RawValue(PBGetAdminListReq *message) {
  GPBDescriptor *descriptor = [PBGetAdminListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBGetAdminListReq_FieldNumber_Locked];
  return GPBGetMessageInt32Field(message, field);
}

void SetPBGetAdminListReq_Locked_RawValue(PBGetAdminListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PBGetAdminListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBGetAdminListReq_FieldNumber_Locked];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PBAdminList

@implementation PBAdminList

@dynamic adminsArray, adminsArray_Count;
@dynamic hasPageInfo, pageInfo;

typedef struct PBAdminList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *adminsArray;
  PBPageInfo *pageInfo;
} PBAdminList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adminsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBAdmin),
        .number = PBAdminList_FieldNumber_AdminsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBAdminList__storage_, adminsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pageInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PBPageInfo),
        .number = PBAdminList_FieldNumber_PageInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBAdminList__storage_, pageInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBAdminList class]
                                     rootClass:[AdminRoot class]
                                          file:AdminRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBAdminList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBResetAdminPasswordReq

@implementation PBResetAdminPasswordReq

@dynamic adminId;
@dynamic originPassword;
@dynamic newPassword;

typedef struct PBResetAdminPasswordReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t adminId;
  NSString *originPassword;
  NSString *newPassword;
} PBResetAdminPasswordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adminId",
        .dataTypeSpecific.className = NULL,
        .number = PBResetAdminPasswordReq_FieldNumber_AdminId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBResetAdminPasswordReq__storage_, adminId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "originPassword",
        .dataTypeSpecific.className = NULL,
        .number = PBResetAdminPasswordReq_FieldNumber_OriginPassword,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBResetAdminPasswordReq__storage_, originPassword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newPassword",
        .dataTypeSpecific.className = NULL,
        .number = PBResetAdminPasswordReq_FieldNumber_NewPassword,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBResetAdminPasswordReq__storage_, newPassword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBResetAdminPasswordReq class]
                                     rootClass:[AdminRoot class]
                                          file:AdminRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBResetAdminPasswordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\016\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBGetAdminLogListReq

@implementation PBGetAdminLogListReq

@dynamic keyword;
@dynamic hasPage, page;

typedef struct PBGetAdminLogListReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *keyword;
  PBPagePara *page;
} PBGetAdminLogListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = PBGetAdminLogListReq_FieldNumber_Keyword,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBGetAdminLogListReq__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(PBPagePara),
        .number = PBGetAdminLogListReq_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBGetAdminLogListReq__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBGetAdminLogListReq class]
                                     rootClass:[AdminRoot class]
                                          file:AdminRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBGetAdminLogListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBAdminLogList

@implementation PBAdminLogList

@dynamic logsArray, logsArray_Count;
@dynamic hasPage, page;

typedef struct PBAdminLogList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *logsArray;
  PBPageInfo *page;
} PBAdminLogList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBAdminLog),
        .number = PBAdminLogList_FieldNumber_LogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBAdminLogList__storage_, logsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(PBPageInfo),
        .number = PBAdminLogList_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBAdminLogList__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBAdminLogList class]
                                     rootClass:[AdminRoot class]
                                          file:AdminRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBAdminLogList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
