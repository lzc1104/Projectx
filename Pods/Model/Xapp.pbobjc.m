// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XApp.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Xapp.pbobjc.h"
 #import "CommonModel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - XappRoot

@implementation XappRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - XappRoot_FileDescriptor

static GPBFileDescriptor *XappRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"jtht"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PBTransactionStatus

GPBEnumDescriptor *PBTransactionStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "TransStatusInvesting\000TransStatusWithDraw"
        "\000TransStatusCanceled\000";
    static const int32_t values[] = {
        PBTransactionStatus_TransStatusInvesting,
        PBTransactionStatus_TransStatusWithDraw,
        PBTransactionStatus_TransStatusCanceled,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBTransactionStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBTransactionStatus_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBTransactionStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBTransactionStatus_TransStatusInvesting:
    case PBTransactionStatus_TransStatusWithDraw:
    case PBTransactionStatus_TransStatusCanceled:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PBUser

@implementation PBUser

@dynamic id_p;
@dynamic name;
@dynamic password;
@dynamic cardno;
@dynamic phoneno;
@dynamic email;
@dynamic birthDate;
@dynamic gender;
@dynamic currentAssets;
@dynamic lastLoginIp;
@dynamic lastLoginTime;

typedef struct PBUser__storage_ {
  uint32_t _has_storage_[1];
  uint32_t id_p;
  NSString *name;
  NSString *password;
  NSString *cardno;
  NSString *phoneno;
  NSString *email;
  NSString *lastLoginIp;
  uint64_t birthDate;
  uint64_t lastLoginTime;
  uint64_t currentAssets;
} PBUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBUser__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBUser__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_Password,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBUser__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardno",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_Cardno,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBUser__storage_, cardno),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneno",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_Phoneno,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBUser__storage_, phoneno),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_Email,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PBUser__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "birthDate",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_BirthDate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PBUser__storage_, birthDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_Gender,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "lastLoginIp",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_LastLoginIp,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PBUser__storage_, lastLoginIp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastLoginTime",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_LastLoginTime,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PBUser__storage_, lastLoginTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "currentAssets",
        .dataTypeSpecific.className = NULL,
        .number = PBUser_FieldNumber_CurrentAssets,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PBUser__storage_, currentAssets),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBUser class]
                                     rootClass:[XappRoot class]
                                          file:XappRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBUser__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\t\013\000\n\r\000Z\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBPortfolio

@implementation PBPortfolio

@dynamic id_p;
@dynamic name;
@dynamic price;
@dynamic endDate;

typedef struct PBPortfolio__storage_ {
  uint32_t _has_storage_[1];
  uint32_t id_p;
  NSString *name;
  uint64_t price;
  uint64_t endDate;
} PBPortfolio__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PBPortfolio_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBPortfolio__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PBPortfolio_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBPortfolio__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = PBPortfolio_FieldNumber_Price,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBPortfolio__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "endDate",
        .dataTypeSpecific.className = NULL,
        .number = PBPortfolio_FieldNumber_EndDate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBPortfolio__storage_, endDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBPortfolio class]
                                     rootClass:[XappRoot class]
                                          file:XappRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBPortfolio__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBTransaction

@implementation PBTransaction

@dynamic id_p;
@dynamic hasUser, user;
@dynamic hasPortfolio, portfolio;
@dynamic initialPrice;
@dynamic initialPayment;
@dynamic unit;
@dynamic status;
@dynamic startDate;
@dynamic finishDate;
@dynamic finishPrice;

typedef struct PBTransaction__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  PBUser *user;
  PBPortfolio *portfolio;
  uint64_t id_p;
  uint64_t initialPrice;
  uint64_t initialPayment;
  uint64_t unit;
  uint64_t startDate;
  uint64_t finishDate;
  uint64_t finishPrice;
} PBTransaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PBTransaction_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBTransaction__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(PBUser),
        .number = PBTransaction_FieldNumber_User,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBTransaction__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "portfolio",
        .dataTypeSpecific.className = GPBStringifySymbol(PBPortfolio),
        .number = PBTransaction_FieldNumber_Portfolio,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBTransaction__storage_, portfolio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "initialPrice",
        .dataTypeSpecific.className = NULL,
        .number = PBTransaction_FieldNumber_InitialPrice,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBTransaction__storage_, initialPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "initialPayment",
        .dataTypeSpecific.className = NULL,
        .number = PBTransaction_FieldNumber_InitialPayment,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBTransaction__storage_, initialPayment),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "unit",
        .dataTypeSpecific.className = NULL,
        .number = PBTransaction_FieldNumber_Unit,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PBTransaction__storage_, unit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PBTransaction_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PBTransaction__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startDate",
        .dataTypeSpecific.className = NULL,
        .number = PBTransaction_FieldNumber_StartDate,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PBTransaction__storage_, startDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "finishDate",
        .dataTypeSpecific.className = NULL,
        .number = PBTransaction_FieldNumber_FinishDate,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PBTransaction__storage_, finishDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "finishPrice",
        .dataTypeSpecific.className = NULL,
        .number = PBTransaction_FieldNumber_FinishPrice,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PBTransaction__storage_, finishPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBTransaction class]
                                     rootClass:[XappRoot class]
                                          file:XappRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBTransaction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\004\014\000\005\016\000\010\t\000\t\n\000\n\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBResetPasswordReq

@implementation PBResetPasswordReq

@dynamic userId;
@dynamic oldPassword;
@dynamic newPassword;

typedef struct PBResetPasswordReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSString *oldPassword;
  NSString *newPassword;
} PBResetPasswordReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PBResetPasswordReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBResetPasswordReq__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "oldPassword",
        .dataTypeSpecific.className = NULL,
        .number = PBResetPasswordReq_FieldNumber_OldPassword,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBResetPasswordReq__storage_, oldPassword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newPassword",
        .dataTypeSpecific.className = NULL,
        .number = PBResetPasswordReq_FieldNumber_NewPassword,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBResetPasswordReq__storage_, newPassword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBResetPasswordReq class]
                                     rootClass:[XappRoot class]
                                          file:XappRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBResetPasswordReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\006\000\002\013\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBPortfolioListReq

@implementation PBPortfolioListReq

@dynamic userId;

typedef struct PBPortfolioListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
} PBPortfolioListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PBPortfolioListReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBPortfolioListReq__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBPortfolioListReq class]
                                     rootClass:[XappRoot class]
                                          file:XappRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBPortfolioListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBPortfolioList

@implementation PBPortfolioList

@dynamic portfoliosArray, portfoliosArray_Count;

typedef struct PBPortfolioList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *portfoliosArray;
} PBPortfolioList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "portfoliosArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBPortfolio),
        .number = PBPortfolioList_FieldNumber_PortfoliosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBPortfolioList__storage_, portfoliosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBPortfolioList class]
                                     rootClass:[XappRoot class]
                                          file:XappRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBPortfolioList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBTransactionListReq

@implementation PBTransactionListReq

@dynamic userId;

typedef struct PBTransactionListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
} PBTransactionListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PBTransactionListReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBTransactionListReq__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBTransactionListReq class]
                                     rootClass:[XappRoot class]
                                          file:XappRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBTransactionListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBTransactionList

@implementation PBTransactionList

@dynamic transactionsArray, transactionsArray_Count;

typedef struct PBTransactionList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *transactionsArray;
} PBTransactionList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBTransaction),
        .number = PBTransactionList_FieldNumber_TransactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBTransactionList__storage_, transactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBTransactionList class]
                                     rootClass:[XappRoot class]
                                          file:XappRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBTransactionList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
