// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BasicMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class PBDevice;
@class PBNetwork;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum PBMessageType

/** 通用消息定义在 0 - 9999 之间 */
typedef GPB_ENUM(PBMessageType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PBMessageType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PBMessageType_Default = 0,

  /** 系统配置 */
  PBMessageType_BasicConfigGet = 1,

  /** 增加系统参数， PBSystemParaConfig -> PBSystemParaConfig */
  PBMessageType_SystemParaAdd = 2,

  /** 更新系统参数, PBSystemParaConfig -> PBSystemParaConfig */
  PBMessageType_SystemParaUpdate = 3,

  /** 获取系统参数， void -> PBSystemParaConfigList */
  PBMessageType_SystemParaGetList = 4,

  /** 获取某个参数， PBStrValue -> PBSystemParaConfig */
  PBMessageType_SystemParaGetOne = 5,

  /** 获取某个参数，没有则返回默认值，PBSystemParaReq -> PBSystemParaConfig */
  PBMessageType_SystemParaGetOneDefault = 6,

  /** 用户相关接口 */
  PBMessageType_UserSendValidCode = 21,

  /** 用户反馈 */
  PBMessageType_FeedbackAdd = 31,

  /** 获取反馈列表，PBGetUserFeedBackListReq -> PBUserFeedbackList */
  PBMessageType_FeedbackGetList = 32,

  /** 删除反馈, PBIntValue -> void */
  PBMessageType_FeedbackDelete = 33,

  /** 更新反馈，PBUserFeedback(feedbackId & remark & required) -> PBUserFeedback */
  PBMessageType_FeedbackUpdate = 34,

  /** 后台管理员 */
  PBMessageType_AdminLogin = 41,

  /** 新增管理员用户，PBAdmin(realName, mobile, password & roles required) --> PBAdmin */
  PBMessageType_AdminAdd = 42,

  /** 获取管理员列表，PBGetAdminListReq --> PBAdminList */
  PBMessageType_AdminGetList = 43,

  /** 重置管理员密码，PBResetAdminPasswordReq --> PBAdmin */
  PBMessageType_AdminResetPassword = 44,

  /** 修改管理员信息，PBAdmin(adminId, realName, mobile, roles & locked required) --> PBAdmin */
  PBMessageType_AdminUpdate = 45,

  /** 后台管理员操作日志 */
  PBMessageType_AdminLogGetList = 51,

  /** 位置区域相关 */
  PBMessageType_LocationGetAll = 61,

  /** 根据经纬度查询对应的Location数据, PBLocationDetectReq -> PBLocation */
  PBMessageType_LocationDetect = 62,

  /** 得到所有省份 PBStrValue --> PBLocationList */
  PBMessageType_LocationGetProvince = 64,

  /** 根据省份得到所有市 PBLocationQueryReq --> PBLocationList */
  PBMessageType_LocationGetCityByProvince = 65,

  /** 根据市得到区县 PBLocationQueryReq --> PBLocationList */
  PBMessageType_LocationGetDistrictByCity = 66,

  /** 根据id 得到 PBIntValue --> PBLocation */
  PBMessageType_LocationGetById = 67,

  /** 获取热门城市信息  void --> PBLocationList */
  PBMessageType_LocationHotCities = 68,

  /** 设置热门城市信息  PBStrValue --> void */
  PBMessageType_LocationSetHotCity = 69,

  /** 取消设置热门城市信息  PBStrValue --> void */
  PBMessageType_LocationUnSetHotCity = 70,

  /** 刷新location缓存 void --> void */
  PBMessageType_LocationRefreshCache = 71,

  /** 设置城市的城市等级 PBUpdateLocationCityLevelReq --> void */
  PBMessageType_LocationUpdateCityLevel = 72,

  /** 根据城市等级获取城市列表 PBGetLocationByCityLevelReq --> PBLocationList */
  PBMessageType_LocationGetByCityLevel = 73,

  /** 根据地址名称 和城市id 获取经纬度 PBGetLocationLntLat --> PBLocationLntLat */
  PBMessageType_LocationGetLngLat = 74,

  /** 添加推送消息 PBPushMessage ->  void */
  PBMessageType_PushMessageAdd = 99,

  /** 获取推送消息列表 PBPushMessageSearchListReq -> PBPushMessageList */
  PBMessageType_PushMessageSearchList = 100,

  /** 单独查看某条消息 PBIntValue -> PBPushMessage */
  PBMessageType_PushMessageGetById = 101,

  /** 客户端请求 9000 - 9499 */
  PBMessageType_SocketLogin = 9000,

  /** WebSocket 心跳消息类型，消息体的内容随意，但不要为空，服务器收到消息之后，会返回一个相同类型的消息 */
  PBMessageType_SocketPingPong = 9001,

  /** 订阅 topic，服务器可能会按照 topic 对一组用户进行广播，PBStrValue(topic) --> void */
  PBMessageType_SocketSubscribeTopic = 9002,

  /** 解除订阅 topic，PBStrValue(topic) --> void */
  PBMessageType_SocketUnsubscribeTopic = 9003,

  /** 服务器推送 9500 - 9999 */
  PBMessageType_SocketMultiLogin = 95000,
};

GPBEnumDescriptor *PBMessageType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PBMessageType_IsValidValue(int32_t value);

#pragma mark - BasicMessageRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface BasicMessageRoot : GPBRootObject
@end

#pragma mark - PBMessageRequest

typedef GPB_ENUM(PBMessageRequest_FieldNumber) {
  PBMessageRequest_FieldNumber_Encrypted = 1,
  PBMessageRequest_FieldNumber_Compressed = 2,
  PBMessageRequest_FieldNumber_Type = 3,
  PBMessageRequest_FieldNumber_MessageData = 4,
  PBMessageRequest_FieldNumber_RequestId = 5,
  PBMessageRequest_FieldNumber_Version = 6,
  PBMessageRequest_FieldNumber_Timestamp = 7,
  PBMessageRequest_FieldNumber_Device = 8,
  PBMessageRequest_FieldNumber_Network = 9,
  PBMessageRequest_FieldNumber_AppVersion = 12,
  PBMessageRequest_FieldNumber_AppKey = 13,
  PBMessageRequest_FieldNumber_AccessToken = 14,
  PBMessageRequest_FieldNumber_Signature = 15,
  PBMessageRequest_FieldNumber_AdminId = 16,
};

/**
 * 消息请求包
 **/
@interface PBMessageRequest : GPBMessage

/** 数据是否加密 */
@property(nonatomic, readwrite) BOOL encrypted;

/** 数据是否压缩 */
@property(nonatomic, readwrite) BOOL compressed;

/** 消息类型 */
@property(nonatomic, readwrite) uint32_t type;

/** 请求数据 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *messageData;

/** 请求 ID */
@property(nonatomic, readwrite) uint64_t requestId;

/** 消息接口版本，暂无用 */
@property(nonatomic, readwrite) uint32_t version;

/** 客户端时间戳 */
@property(nonatomic, readwrite) uint64_t timestamp;

/** 设备信息 */
@property(nonatomic, readwrite, strong, null_resettable) PBDevice *device;
/** Test to see if @c device has been set. */
@property(nonatomic, readwrite) BOOL hasDevice;

/** 网络信息 */
@property(nonatomic, readwrite, strong, null_resettable) PBNetwork *network;
/** Test to see if @c network has been set. */
@property(nonatomic, readwrite) BOOL hasNetwork;

/** 应用程序版本号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appVersion;

/** 客户端 APP KEY，用于加密 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appKey;

/** 用户登录后服务器返回的 token，用于登录校验 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *accessToken;

/** 数据签名，用于防伪，暂无用 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *signature;

/** 管理员 ID（后台管理系统使用） */
@property(nonatomic, readwrite) uint32_t adminId;

@end

#pragma mark - PBMessageResponse

typedef GPB_ENUM(PBMessageResponse_FieldNumber) {
  PBMessageResponse_FieldNumber_Encrypted = 1,
  PBMessageResponse_FieldNumber_Compressed = 2,
  PBMessageResponse_FieldNumber_Type = 3,
  PBMessageResponse_FieldNumber_MessageData = 4,
  PBMessageResponse_FieldNumber_RequestId = 5,
  PBMessageResponse_FieldNumber_ResultCode = 6,
  PBMessageResponse_FieldNumber_ResultInfo = 7,
  PBMessageResponse_FieldNumber_AppKey = 8,
};

/**
 * 消息响应包
 **/
@interface PBMessageResponse : GPBMessage

/** 返回数据是否加密 */
@property(nonatomic, readwrite) BOOL encrypted;

/** 返回数据是否压缩 */
@property(nonatomic, readwrite) BOOL compressed;

/** 消息类型 */
@property(nonatomic, readwrite) uint32_t type;

/** 返回数据 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *messageData;

/** APP KEY，用于加密 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appKey;

/** 该响应对应的请求 ID */
@property(nonatomic, readwrite) uint64_t requestId;

/** 返回的结果码 */
@property(nonatomic, readwrite) uint32_t resultCode;

/** 返回的结果消息提示文本（用于错误提示） */
@property(nonatomic, readwrite, copy, null_resettable) NSString *resultInfo;

@end

#pragma mark - PBSocketMessage

typedef GPB_ENUM(PBSocketMessage_FieldNumber) {
  PBSocketMessage_FieldNumber_Encrypted = 1,
  PBSocketMessage_FieldNumber_Compressed = 2,
  PBSocketMessage_FieldNumber_Type = 3,
  PBSocketMessage_FieldNumber_MessageData = 4,
  PBSocketMessage_FieldNumber_Ack = 5,
  PBSocketMessage_FieldNumber_RequestId = 6,
  PBSocketMessage_FieldNumber_Version = 7,
  PBSocketMessage_FieldNumber_Timestamp = 8,
  PBSocketMessage_FieldNumber_Device = 9,
  PBSocketMessage_FieldNumber_Network = 10,
  PBSocketMessage_FieldNumber_AppVersion = 11,
  PBSocketMessage_FieldNumber_AppKey = 12,
  PBSocketMessage_FieldNumber_AccessToken = 13,
  PBSocketMessage_FieldNumber_Signature = 14,
  PBSocketMessage_FieldNumber_ResultCode = 15,
  PBSocketMessage_FieldNumber_ResultInfo = 16,
};

/**
 * WebSocket 消息包
 **/
@interface PBSocketMessage : GPBMessage

/** 数据是否加密 */
@property(nonatomic, readwrite) BOOL encrypted;

/** 数据是否压缩 */
@property(nonatomic, readwrite) BOOL compressed;

/** 消息类型 */
@property(nonatomic, readwrite) uint32_t type;

/** 请求数据 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *messageData;

/** 该消息是否为 ack 响应 */
@property(nonatomic, readwrite) BOOL ack;

/** 该消息的唯一ID，当 ack 为 false 时，由发送方生成，当 ack 为 true 时，须与请求消息的 ID 保持一致 */
@property(nonatomic, readwrite) uint64_t requestId;

/** 消息接口版本，暂无用 */
@property(nonatomic, readwrite) uint32_t version;

/** 发送消息的时间戳 */
@property(nonatomic, readwrite) uint64_t timestamp;

/** 设备信息 */
@property(nonatomic, readwrite, strong, null_resettable) PBDevice *device;
/** Test to see if @c device has been set. */
@property(nonatomic, readwrite) BOOL hasDevice;

/** 网络信息 */
@property(nonatomic, readwrite, strong, null_resettable) PBNetwork *network;
/** Test to see if @c network has been set. */
@property(nonatomic, readwrite) BOOL hasNetwork;

/** 应用程序版本号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appVersion;

/** 客户端APP KEY，各个客户端不同，用于加密 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appKey;

/** 用户登录后服务器返回的 token，用于登录校验 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *accessToken;

/** 数据签名，用于防伪，暂无用 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *signature;

/** 结果码，仅当 ack 为 true 时使用 */
@property(nonatomic, readwrite) uint32_t resultCode;

/** 结果提示文本，仅当 ack 为 true 时使用 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *resultInfo;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
