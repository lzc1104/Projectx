// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Location.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Location.pbobjc.h"
 #import "CommonModel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LocationRoot

@implementation LocationRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - LocationRoot_FileDescriptor

static GPBFileDescriptor *LocationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"framework"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PBLocationLevel

GPBEnumDescriptor *PBLocationLevel_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Province\000City\000District\000";
    static const int32_t values[] = {
        PBLocationLevel_Province,
        PBLocationLevel_City,
        PBLocationLevel_District,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBLocationLevel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBLocationLevel_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBLocationLevel_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBLocationLevel_Province:
    case PBLocationLevel_City:
    case PBLocationLevel_District:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PBLocationCityLevel

GPBEnumDescriptor *PBLocationCityLevel_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "LocationFirstLevelCity\000LocationSecondLev"
        "elCity\000LocationOtherCity\000LocationAllCity"
        "\000";
    static const int32_t values[] = {
        PBLocationCityLevel_LocationFirstLevelCity,
        PBLocationCityLevel_LocationSecondLevelCity,
        PBLocationCityLevel_LocationOtherCity,
        PBLocationCityLevel_LocationAllCity,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBLocationCityLevel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBLocationCityLevel_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBLocationCityLevel_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBLocationCityLevel_LocationFirstLevelCity:
    case PBLocationCityLevel_LocationSecondLevelCity:
    case PBLocationCityLevel_LocationOtherCity:
    case PBLocationCityLevel_LocationAllCity:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PBSearchLocationType

GPBEnumDescriptor *PBSearchLocationType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "SearchLocationDistrict\000SearchLocationCit"
        "y\000SearchLocationProvince\000";
    static const int32_t values[] = {
        PBSearchLocationType_SearchLocationDistrict,
        PBSearchLocationType_SearchLocationCity,
        PBSearchLocationType_SearchLocationProvince,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBSearchLocationType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBSearchLocationType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBSearchLocationType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBSearchLocationType_SearchLocationDistrict:
    case PBSearchLocationType_SearchLocationCity:
    case PBSearchLocationType_SearchLocationProvince:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PBLocationType

GPBEnumDescriptor *PBLocationType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "LocationsFlat\000LocationsTree\000";
    static const int32_t values[] = {
        PBLocationType_LocationsFlat,
        PBLocationType_LocationsTree,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBLocationType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBLocationType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBLocationType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBLocationType_LocationsFlat:
    case PBLocationType_LocationsTree:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PBLocation

@implementation PBLocation

@dynamic locationId;
@dynamic oversea;
@dynamic continentId;
@dynamic countryId;
@dynamic provinceId;
@dynamic cityId;
@dynamic districtId;
@dynamic provinceName;
@dynamic cityName;
@dynamic districtName;
@dynamic level;
@dynamic hot;
@dynamic sorted;
@dynamic nameSpelling;
@dynamic subLocationsArray, subLocationsArray_Count;
@dynamic shortSpelling;
@dynamic cityLevel;

typedef struct PBLocation__storage_ {
  uint32_t _has_storage_[1];
  uint32_t locationId;
  uint32_t continentId;
  uint32_t countryId;
  uint32_t provinceId;
  uint32_t cityId;
  uint32_t districtId;
  PBLocationLevel level;
  uint32_t sorted;
  PBLocationCityLevel cityLevel;
  NSString *districtName;
  NSString *provinceName;
  NSString *cityName;
  NSString *nameSpelling;
  NSMutableArray *subLocationsArray;
  NSString *shortSpelling;
} PBLocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locationId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_LocationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLocation__storage_, locationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "oversea",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_Oversea,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "continentId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_ContinentId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBLocation__storage_, continentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "countryId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_CountryId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PBLocation__storage_, countryId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "provinceId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_ProvinceId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PBLocation__storage_, provinceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cityId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_CityId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PBLocation__storage_, cityId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "districtId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_DistrictId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PBLocation__storage_, districtId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "districtName",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_DistrictName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PBLocation__storage_, districtName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "provinceName",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_ProvinceName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PBLocation__storage_, provinceName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityName",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_CityName,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PBLocation__storage_, cityName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hot",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_Hot,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "level",
        .dataTypeSpecific.enumDescFunc = PBLocationLevel_EnumDescriptor,
        .number = PBLocation_FieldNumber_Level,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PBLocation__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sorted",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_Sorted,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PBLocation__storage_, sorted),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nameSpelling",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_NameSpelling,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PBLocation__storage_, nameSpelling),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subLocationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBLocation),
        .number = PBLocation_FieldNumber_SubLocationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBLocation__storage_, subLocationsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shortSpelling",
        .dataTypeSpecific.className = NULL,
        .number = PBLocation_FieldNumber_ShortSpelling,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PBLocation__storage_, shortSpelling),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityLevel",
        .dataTypeSpecific.enumDescFunc = PBLocationCityLevel_EnumDescriptor,
        .number = PBLocation_FieldNumber_CityLevel,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PBLocation__storage_, cityLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocation class]
                                     rootClass:[LocationRoot class]
                                          file:LocationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\r\001\n\000\003\013\000\004\t\000\005\n\000\006\006\000\007\n\000\010\014\000\t\014\000\n\010\000\016\014\000\017\000subLoca"
        "tions\000\020\r\000\021\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PBLocation_Level_RawValue(PBLocation *message) {
  GPBDescriptor *descriptor = [PBLocation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBLocation_FieldNumber_Level];
  return GPBGetMessageInt32Field(message, field);
}

void SetPBLocation_Level_RawValue(PBLocation *message, int32_t value) {
  GPBDescriptor *descriptor = [PBLocation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBLocation_FieldNumber_Level];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PBLocation_CityLevel_RawValue(PBLocation *message) {
  GPBDescriptor *descriptor = [PBLocation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBLocation_FieldNumber_CityLevel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPBLocation_CityLevel_RawValue(PBLocation *message, int32_t value) {
  GPBDescriptor *descriptor = [PBLocation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBLocation_FieldNumber_CityLevel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PBLocationQueryReq

@implementation PBLocationQueryReq

@dynamic higherId;
@dynamic locationName;

typedef struct PBLocationQueryReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t higherId;
  NSString *locationName;
} PBLocationQueryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "higherId",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationQueryReq_FieldNumber_HigherId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLocationQueryReq__storage_, higherId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "locationName",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationQueryReq_FieldNumber_LocationName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBLocationQueryReq__storage_, locationName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocationQueryReq class]
                                     rootClass:[LocationRoot class]
                                          file:LocationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocationQueryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBLocationList

@implementation PBLocationList

@dynamic locationsArray, locationsArray_Count;
@dynamic hasPageInfo, pageInfo;

typedef struct PBLocationList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *locationsArray;
  PBPageInfo *pageInfo;
} PBLocationList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBLocation),
        .number = PBLocationList_FieldNumber_LocationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBLocationList__storage_, locationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pageInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(PBPageInfo),
        .number = PBLocationList_FieldNumber_PageInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLocationList__storage_, pageInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocationList class]
                                     rootClass:[LocationRoot class]
                                          file:LocationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocationList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBUpdateLocationCityLevelReq

@implementation PBUpdateLocationCityLevelReq

@dynamic cityName;
@dynamic cityLevel;

typedef struct PBUpdateLocationCityLevelReq__storage_ {
  uint32_t _has_storage_[1];
  PBLocationCityLevel cityLevel;
  NSString *cityName;
} PBUpdateLocationCityLevelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cityName",
        .dataTypeSpecific.className = NULL,
        .number = PBUpdateLocationCityLevelReq_FieldNumber_CityName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBUpdateLocationCityLevelReq__storage_, cityName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cityLevel",
        .dataTypeSpecific.enumDescFunc = PBLocationCityLevel_EnumDescriptor,
        .number = PBUpdateLocationCityLevelReq_FieldNumber_CityLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBUpdateLocationCityLevelReq__storage_, cityLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBUpdateLocationCityLevelReq class]
                                     rootClass:[LocationRoot class]
                                          file:LocationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBUpdateLocationCityLevelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PBUpdateLocationCityLevelReq_CityLevel_RawValue(PBUpdateLocationCityLevelReq *message) {
  GPBDescriptor *descriptor = [PBUpdateLocationCityLevelReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBUpdateLocationCityLevelReq_FieldNumber_CityLevel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPBUpdateLocationCityLevelReq_CityLevel_RawValue(PBUpdateLocationCityLevelReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PBUpdateLocationCityLevelReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBUpdateLocationCityLevelReq_FieldNumber_CityLevel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PBGetLocationByCityLevelReq

@implementation PBGetLocationByCityLevelReq

@dynamic cityLevel;

typedef struct PBGetLocationByCityLevelReq__storage_ {
  uint32_t _has_storage_[1];
  PBLocationCityLevel cityLevel;
} PBGetLocationByCityLevelReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cityLevel",
        .dataTypeSpecific.enumDescFunc = PBLocationCityLevel_EnumDescriptor,
        .number = PBGetLocationByCityLevelReq_FieldNumber_CityLevel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBGetLocationByCityLevelReq__storage_, cityLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBGetLocationByCityLevelReq class]
                                     rootClass:[LocationRoot class]
                                          file:LocationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBGetLocationByCityLevelReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PBGetLocationByCityLevelReq_CityLevel_RawValue(PBGetLocationByCityLevelReq *message) {
  GPBDescriptor *descriptor = [PBGetLocationByCityLevelReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBGetLocationByCityLevelReq_FieldNumber_CityLevel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPBGetLocationByCityLevelReq_CityLevel_RawValue(PBGetLocationByCityLevelReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PBGetLocationByCityLevelReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBGetLocationByCityLevelReq_FieldNumber_CityLevel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PBLocationGetAllReq

@implementation PBLocationGetAllReq

@dynamic version;
@dynamic returnType;

typedef struct PBLocationGetAllReq__storage_ {
  uint32_t _has_storage_[1];
  PBLocationType returnType;
  uint64_t version;
} PBLocationGetAllReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationGetAllReq_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLocationGetAllReq__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "returnType",
        .dataTypeSpecific.enumDescFunc = PBLocationType_EnumDescriptor,
        .number = PBLocationGetAllReq_FieldNumber_ReturnType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBLocationGetAllReq__storage_, returnType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocationGetAllReq class]
                                     rootClass:[LocationRoot class]
                                          file:LocationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocationGetAllReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PBLocationGetAllReq_ReturnType_RawValue(PBLocationGetAllReq *message) {
  GPBDescriptor *descriptor = [PBLocationGetAllReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBLocationGetAllReq_FieldNumber_ReturnType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPBLocationGetAllReq_ReturnType_RawValue(PBLocationGetAllReq *message, int32_t value) {
  GPBDescriptor *descriptor = [PBLocationGetAllReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBLocationGetAllReq_FieldNumber_ReturnType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PBLocationData

@implementation PBLocationData

@dynamic locationsArray, locationsArray_Count;
@dynamic modifyTime;

typedef struct PBLocationData__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *locationsArray;
  uint64_t modifyTime;
} PBLocationData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PBLocation),
        .number = PBLocationData_FieldNumber_LocationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBLocationData__storage_, locationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modifyTime",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationData_FieldNumber_ModifyTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLocationData__storage_, modifyTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocationData class]
                                     rootClass:[LocationRoot class]
                                          file:LocationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocationData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBLocationDetectReq

@implementation PBLocationDetectReq

@dynamic longitude;
@dynamic latitude;

typedef struct PBLocationDetectReq__storage_ {
  uint32_t _has_storage_[1];
  double longitude;
  double latitude;
} PBLocationDetectReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationDetectReq_FieldNumber_Longitude,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLocationDetectReq__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationDetectReq_FieldNumber_Latitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBLocationDetectReq__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocationDetectReq class]
                                     rootClass:[LocationRoot class]
                                          file:LocationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocationDetectReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBGetLocationLntLat

@implementation PBGetLocationLntLat

@dynamic locationId;
@dynamic address;

typedef struct PBGetLocationLntLat__storage_ {
  uint32_t _has_storage_[1];
  uint32_t locationId;
  NSString *address;
} PBGetLocationLntLat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locationId",
        .dataTypeSpecific.className = NULL,
        .number = PBGetLocationLntLat_FieldNumber_LocationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBGetLocationLntLat__storage_, locationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = PBGetLocationLntLat_FieldNumber_Address,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBGetLocationLntLat__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBGetLocationLntLat class]
                                     rootClass:[LocationRoot class]
                                          file:LocationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBGetLocationLntLat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PBLocationLntLat

@implementation PBLocationLntLat

@dynamic longitude;
@dynamic latitude;

typedef struct PBLocationLntLat__storage_ {
  uint32_t _has_storage_[1];
  double longitude;
  double latitude;
} PBLocationLntLat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationLntLat_FieldNumber_Longitude,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBLocationLntLat__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = PBLocationLntLat_FieldNumber_Latitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBLocationLntLat__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBLocationLntLat class]
                                     rootClass:[LocationRoot class]
                                          file:LocationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBLocationLntLat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
